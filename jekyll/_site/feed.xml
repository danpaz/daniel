<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://danpaz.me/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://danpaz.me/blog/" rel="alternate" type="text/html" /><updated>2017-10-04T22:10:16-04:00</updated><id>http://danpaz.me/blog/</id><title type="html">danpaz on the internet</title><subtitle>Tech and sometimes-not-tech blog by Daniel Paz-Soldan, also known as danpaz on the web.
</subtitle><entry><title type="html">My first homebrew formula</title><link href="http://danpaz.me/blog/homebrew/2017/10/04/first-homebrew-formula.html" rel="alternate" type="text/html" title="My first homebrew formula" /><published>2017-10-04T00:00:00-04:00</published><updated>2017-10-04T00:00:00-04:00</updated><id>http://danpaz.me/blog/homebrew/2017/10/04/first-homebrew-formula</id><content type="html" xml:base="http://danpaz.me/blog/homebrew/2017/10/04/first-homebrew-formula.html">&lt;p&gt;I recently wrote a small note taking cli tool called &lt;a href=&quot;https://github.com/danpaz/notem&quot;&gt;notem&lt;/a&gt;
and wanted to distribute it via &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;. There is documentation
on how to do this as well as examples around the internet but I still found it a
bit tricky to figure out how things all work together.&lt;/p&gt;

&lt;h2 id=&quot;so-you-want-to-brew&quot;&gt;So you want to brew&lt;/h2&gt;

&lt;p&gt;Homebrew essentially manages packages in a GitHub repo, and adding a new package
to the registry comes down to making a git branch and pull request to the repo.&lt;/p&gt;

&lt;p&gt;You’ll need:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Homebrew installed&lt;/li&gt;
  &lt;li&gt;A binary you want to distribute to folks&lt;/li&gt;
  &lt;li&gt;A public url to that binary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get a public url I published my program to a new GitHub repo (danpaz/notem).
Then I gave it a git tag so that GitHub would generate a tagged release
automatically based on that tag.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add . &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;Initial commit&quot;&lt;/span&gt;
git tag 0.0.1
git push &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push --tags

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This results in a tar archive available at https://github.com/danpaz/notem/archive/0.0.1.tar.gz.&lt;/p&gt;

&lt;h2 id=&quot;formulas&quot;&gt;Formulas&lt;/h2&gt;

&lt;p&gt;Next I had to write a &lt;a href=&quot;https://docs.brew.sh/Formula-Cookbook.html&quot;&gt;formula&lt;/a&gt;, a
ruby script that tells Homebrew how to install the package. The
&lt;code class=&quot;highlighter-rouge&quot;&gt;brew create &amp;lt;url&amp;gt;&lt;/code&gt; command helps out by creating the boilerplate file with
space for me to define the installation of my binary.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew create https://github.com/danpaz/notem/archive/0.0.1.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This created a file for me at /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/notem.rb.
I deleted the comment blocks and filled in the &lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; function
bodies. Here’s what I ended up with:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Notem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Formula&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Super simple note taking system&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;homepage&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/danpaz/notem&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/danpaz/notem/archive/0.0.1.tar.gz&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;e9aa372dcce352938d0042b96a782de4dd319a5aceeae74dbfdac1c5ba1084f8&quot;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Add a symlink to my binary.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;notem&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Run a command to verify the install. I think this command has to exit with&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# status 0 to pass the test.&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/notem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-l&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt;, I added &lt;code class=&quot;highlighter-rouge&quot;&gt;bin.install &quot;notem&quot;&lt;/code&gt; to add my binary to the user’s path.
For &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; I added &lt;code class=&quot;highlighter-rouge&quot;&gt;system &quot;#{bin}/notem&quot;, &quot;-l&quot;&lt;/code&gt; which verifies my binary runs
successfully after install.&lt;/p&gt;

&lt;p&gt;I found it useful to refer to other packages’ formulas. As mentioned earlier
these are all on GitHub. For example, &lt;a href=&quot;https://github.com/Homebrew/homebrew-core/blob/master/Formula/tmux.rb&quot;&gt;here’s the tmux formula&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To verify I ran&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew audit --new-formula notem
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and got this output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;notem:
  * GitHub repository not notable enough (&amp;lt;20 forks, &amp;lt;20 watchers and &amp;lt;50 stars)
  * GitHub repository too new (&amp;lt;30 days old)
Error: 2 problems in 1 formula
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ouch.&lt;/p&gt;

&lt;h2 id=&quot;tap-out&quot;&gt;Tap out&lt;/h2&gt;

&lt;p&gt;So my hot new program isn’t official enough for Homebrew.
Luckily you can still publish your binary as a &lt;a href=&quot;https://docs.brew.sh/brew-tap.html&quot;&gt;tap&lt;/a&gt;,
a third-party repository.&lt;/p&gt;

&lt;p&gt;Users can then install with an extra command, like this:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew tap danpaz/tap
brew install notem
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s good enough for me! Let’s set it up.&lt;/p&gt;

&lt;p&gt;I created a new repo called danpaz/homebrew-tap, and this repo will house all of
my future brew formulas. In that repo I copied over my &lt;code class=&quot;highlighter-rouge&quot;&gt;notem&lt;/code&gt; formula from earlier:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/notem.rb ./Formula
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;ed that to GitHub. That’s it! Now &lt;code class=&quot;highlighter-rouge&quot;&gt;brew tap danpaz/tap&lt;/code&gt; will clone
this repo to the user’s Taps and let them install my package with &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install notem&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;helpful-links&quot;&gt;Helpful links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://docs.brew.sh/Formula-Cookbook.html&lt;/li&gt;
  &lt;li&gt;https://speakerdeck.com/defeated/homebrew-publish-your-first-formula&lt;/li&gt;
  &lt;li&gt;http://kylebebak.github.io/post/distribute-program-via-homebrew&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-D&lt;/p&gt;</content><author><name></name></author><summary type="html">I recently wrote a small note taking cli tool called notem and wanted to distribute it via Homebrew. There is documentation on how to do this as well as examples around the internet but I still found it a bit tricky to figure out how things all work together.</summary></entry><entry><title type="html">Robbie Holmes on Imposter Syndrome</title><link href="http://danpaz.me/blog/talks/imposter/2017/09/21/robbiethegeek-imposter-syndrome.html" rel="alternate" type="text/html" title="Robbie Holmes on Imposter Syndrome" /><published>2017-09-21T15:00:00-04:00</published><updated>2017-09-21T15:00:00-04:00</updated><id>http://danpaz.me/blog/talks/imposter/2017/09/21/robbiethegeek-imposter-syndrome</id><content type="html" xml:base="http://danpaz.me/blog/talks/imposter/2017/09/21/robbiethegeek-imposter-syndrome.html">&lt;p&gt;Robbie Holmes (&lt;a href=&quot;https://twitter.com/robbiethegeek&quot;&gt;@robbiethegeek&lt;/a&gt;) gave a
fantastic talk at TechTalkDC yesterday. Robbie is a fountain of wisdom and the
DC tech community is lucky to have him.&lt;/p&gt;

&lt;p&gt;Here are my notes and takeaways:&lt;/p&gt;

&lt;h2 id=&quot;understand-your-privilege&quot;&gt;Understand your privilege&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Not everyone grew up the same way you did.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;two-big-impacts-of-imposter-syndrome&quot;&gt;Two big impacts of imposter syndrome&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Staying at a job that’s boring or tedious way longer than you should.&lt;/li&gt;
  &lt;li&gt;Worry people will find out you’re a fraud.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;getting-acqui-hired-is-the-best-way-to-bring-out-your-imposter-syndrome&quot;&gt;Getting acqui-hired is the best way to bring out your imposter syndrome&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;(Zagat to Google)&lt;/li&gt;
  &lt;li&gt;Didn’t get interviewed, placed in a “web developer” position&lt;/li&gt;
  &lt;li&gt;Everyone at Google works off of HEAD so you feel like you’re constantly breaking things!&lt;/li&gt;
  &lt;li&gt;“It was me saying I didn’t have the skills”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;joining-usds&quot;&gt;Joining USDS&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Folks with a ton of empathy and a lot of experience&lt;/li&gt;
  &lt;li&gt;Healthcare application for Department of Veteran Affairs in node and react&lt;/li&gt;
  &lt;li&gt;React was not core competency&lt;/li&gt;
  &lt;li&gt;Team decided to move over to rails first week in&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;community-is-important&quot;&gt;Community is important&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Transitioning from being an attendee to organizer - fake it til you make it&lt;/li&gt;
  &lt;li&gt;People start looking up to you&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;staying-up-to-date-on-trends&quot;&gt;Staying up to date on trends&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Podcasts&lt;/li&gt;
  &lt;li&gt;Blogs&lt;/li&gt;
  &lt;li&gt;Social media&lt;/li&gt;
  &lt;li&gt;Know how you learn best&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;learn-one-new-skill-at-a-time&quot;&gt;Learn one new skill at a time&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Maybe don’t switch editors when you’re learning a new language&lt;/li&gt;
  &lt;li&gt;Focus on one thing&lt;/li&gt;
  &lt;li&gt;Reduce context switching from what you know to what you’re learning&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;imposter-syndrome-coping-strategy&quot;&gt;Imposter syndrome coping strategy&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Become a part of the community
    &lt;ul&gt;
      &lt;li&gt;if you’re going to tech events, you’re probably in the top 25% of people at your level because you’re learning from others&lt;/li&gt;
      &lt;li&gt;Speakers are in the top 10%&lt;/li&gt;
      &lt;li&gt;Most people don’t engage in community, just because you’re here you are ahead of the curve&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Fake it in public
    &lt;ul&gt;
      &lt;li&gt;host a lunch and learn&lt;/li&gt;
      &lt;li&gt;present at conferences or meetups&lt;/li&gt;
      &lt;li&gt;become an organizer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fin&quot;&gt;Fin&lt;/h2&gt;

&lt;p&gt;A huge thank you to Robbie for sharing his story with us. And thank you Excella
Consulting for hosting, and for posting a video of this talk!&lt;/p&gt;

&lt;p&gt;Slides: http://slides.com/robbiethegeek/imposter-syndrome&lt;/p&gt;

&lt;p&gt;Video: https://www.youtube.com/watch?v=zRqefvKkgfc&lt;/p&gt;

&lt;p&gt;-D&lt;/p&gt;</content><author><name></name></author><summary type="html">Robbie Holmes (@robbiethegeek) gave a fantastic talk at TechTalkDC yesterday. Robbie is a fountain of wisdom and the DC tech community is lucky to have him.</summary></entry><entry><title type="html">Hosting a Jekyll blog on GitHub pages in a subfolder</title><link href="http://danpaz.me/blog/jekyll/2017/09/20/jekyll-in-subfolder.html" rel="alternate" type="text/html" title="Hosting a Jekyll blog on GitHub pages in a subfolder" /><published>2017-09-20T00:00:00-04:00</published><updated>2017-09-20T00:00:00-04:00</updated><id>http://danpaz.me/blog/jekyll/2017/09/20/jekyll-in-subfolder</id><content type="html" xml:base="http://danpaz.me/blog/jekyll/2017/09/20/jekyll-in-subfolder.html">&lt;p&gt;&lt;strong&gt;TLDR: I commit the output of jekyll build and use a symbolic link to point
&lt;code class=&quot;highlighter-rouge&quot;&gt;/blog/&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;/jekyll/_site&lt;/code&gt;. Works great!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I recently set up this blog using Jekyll hosted on GitHub pages. It was a lovely
experience getting started and gave me exactly what I was looking for - a full
featured blog framework that gets out of my way and lets me just write.&lt;/p&gt;

&lt;p&gt;But there was one gotcha that almost made me abandon ship. I really wanted to
host the blog at danpaz.me/blog, while keeping the same splash page at danpaz.me
that I already have in place.&lt;/p&gt;

&lt;p&gt;I took the first step of adding the /blog baseurl in my jekyll configs.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
baseurl: &quot;/blog&quot; # the subpath of your site, e.g. /blog
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then I saw this in the jekyll docs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/img/jekyll-source-files-root.png&quot; alt=&quot;Source Files Must be in the Root Directory&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GitHub Pages overrides the “Site Source” configuration value, so if you locate your files anywhere other than the root directory, your site may not build correctly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Meaning that in order for GitHub to properly build the jekyll site I would have
to keep all jekyll files at the root of the repo, and the site’s index.html
would be generated by the jekyll build. So I would lose my splash page! One
workaround is to &lt;a href=&quot;https://jekyllrb.com/docs/themes/#overriding-theme-defaults&quot;&gt;replace the jekyll theme’s index.html with my own&lt;/a&gt;, but
then I’d lose the nice blog post list the theme provides.&lt;/p&gt;

&lt;p&gt;Instead, I decided to commit the output of jekyll build in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site/&lt;/code&gt; directory.
But to make sure the blog is served at &lt;code class=&quot;highlighter-rouge&quot;&gt;danpaz.me/blog&lt;/code&gt; and not &lt;code class=&quot;highlighter-rouge&quot;&gt;danpaz.me/blog/_site/&lt;/code&gt;
the built files need to be in a &lt;code class=&quot;highlighter-rouge&quot;&gt;blog&lt;/code&gt; directory in my github repo. I considered
copying the built files into a &lt;code class=&quot;highlighter-rouge&quot;&gt;blog&lt;/code&gt; directory every time I build with jekyll,
but I decided to try using a &lt;a href=&quot;https://linux.die.net/man/1/ln&quot;&gt;symlink&lt;/a&gt; to avoid the manual copy step.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ln -sv jekyll/_site blog
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I wasn’t sure if GitHub would support symbolic links in this way, but turns out
it works fine!&lt;/p&gt;

&lt;p&gt;Now my workflow is to keep a terminal open with jekyll build watching to rebuild
the site:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd jekyll
$ jekyll build --watch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now I can add and edit posts to the &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll/_posts/&lt;/code&gt; directory without thinking
about building the output. If I need to view my blog locally I instead use
&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Any thoughts on this approach? Get in touch and let me know!&lt;/p&gt;

&lt;p&gt;-D&lt;/p&gt;</content><author><name></name></author><summary type="html">TLDR: I commit the output of jekyll build and use a symbolic link to point /blog/ to /jekyll/_site. Works great!</summary></entry><entry><title type="html">Hey it’s danpaz on the internet!</title><link href="http://danpaz.me/blog/hello/2017/09/20/hello-world.html" rel="alternate" type="text/html" title="Hey it's danpaz on the internet!" /><published>2017-09-20T00:00:00-04:00</published><updated>2017-09-20T00:00:00-04:00</updated><id>http://danpaz.me/blog/hello/2017/09/20/hello-world</id><content type="html" xml:base="http://danpaz.me/blog/hello/2017/09/20/hello-world.html">&lt;p&gt;Here we go again! This must be my third time starting a blog :)&lt;/p&gt;

&lt;p&gt;I’m trying jekyll on github pages, but had to jump through some hoops to host it
on /blog while keeping the same homepage at danpaz.me. That’ll be the topic of
my first post!&lt;/p&gt;

&lt;p&gt;-D&lt;/p&gt;</content><author><name></name></author><summary type="html">Here we go again! This must be my third time starting a blog :)</summary></entry></feed>